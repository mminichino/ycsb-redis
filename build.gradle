plugins {
    id 'java'
    id 'java-library'
    id 'distribution'
    id 'application'
}

group = 'site.ycsb'
version = '2.0.7-2'

allprojects {
    repositories {
        mavenCentral()
    }
}

dependencies {
    implementation("org.apache.htrace:htrace-core4:4.1.0-incubating")

    implementation("com.fasterxml.jackson.core:jackson-annotations:2.16.0")
    implementation("com.fasterxml.jackson.core:jackson-core:2.16.0")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.16.0")

    implementation("org.apache.commons:commons-math3:3.6.1")
    implementation("org.apache.commons:commons-lang3:3.18.0")

    implementation("redis.clients:jedis:6.1.0")

    implementation("io.projectreactor:reactor-core:3.4.18")
    implementation("io.projectreactor.addons:reactor-extra:3.4.8")
    implementation("io.projectreactor.addons:reactor-adapter:3.4.8")
    implementation("io.reactivex:rxjava-reactive-streams:1.2.1")

    implementation("ch.qos.logback:logback-classic:1.5.18")
    implementation("com.google.code.gson:gson:2.10.1")

    implementation("commons-cli:commons-cli:1.6.0")

    implementation("com.squareup.okhttp3:okhttp:4.12.0")
    implementation("com.squareup.okhttp3:logging-interceptor:4.12.0")

    implementation("org.hdrhistogram:HdrHistogram:2.1.12")

    testImplementation("org.testng:testng:7.9.0")

    implementation("com.google.collections:google-collections:1.0")
    implementation("org.slf4j:slf4j-api:2.0.10")
}

java {
    toolchain {
        sourceCompatibility = JavaLanguageVersion.of(11)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

tasks.withType(Javadoc).configureEach {
    options.encoding = "UTF-8"
    def std = options as StandardJavadocDocletOptions
    std.tags(
            'apiNote:a:"API Note:"',
            'implSpec:a:"Implementation Requirements:"',
            'implNote:a:"Implementation Note:"'
    )
    std.addBooleanOption('Xdoclint:none', true)
    std.addBooleanOption('html5', true)
}

tasks.test {
    useTestNG()
    testLogging {
        events("failed", "skipped")
    }
}

application {
    mainClass = 'site.ycsb.Client'
    applicationDistribution.from("src/main/resources/") {
        into "conf"
    }
}

tasks.named("startScripts") {
    classpath += files("../conf")
}

tasks.named("distTar") {
    compression = Compression.GZIP
}

//tasks.register("stageDependencies", Copy) {
//    description = "Stages runtime dependencies"
//    from(configurations.runtimeClasspath)
//    into(layout.buildDirectory.dir("dependencies"))
//}
//
//gradle.taskGraph.whenReady { graph ->
//    if (project.hasProperty("sourceRun") && graph.hasTask(":core:build")) {
//        tasks.build.finalizedBy(tasks.named("stageDependencies"))
//    }
//}
