import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id 'java'
    id 'java-library'
    id 'distribution'
    id 'application'
    id 'org.jreleaser' version '1.19.0'
}

group = 'com.redislabs.ycsb'
version = '1.0.1'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.codelry.util.ycsb:ycsb-core:0.18.2'
    implementation 'com.codelry.util:restfull-core:1.0.2'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.19.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.19.2'
    implementation 'io.lettuce:lettuce-core:6.8.0.RELEASE'
    implementation 'com.redis:lettucemod:4.4.0'
    implementation 'org.apache.commons:commons-pool2:2.12.1'
    implementation 'io.netty:netty-resolver-dns-native-macos:4.2.4.Final:osx-aarch_64'
    implementation 'io.netty:netty-resolver-dns-native-macos:4.2.4.Final:osx-x86_64'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.compileJava {
    options.release.set(8)
}

tasks.test {
    useJUnitPlatform()
}

tasks.register('printTestClasspath') {
    doLast {
        println "Test Classpath:"
        sourceSets.test.runtimeClasspath.each { file ->
            println file.absolutePath
        }
    }
}

tasks.register('updateAppVersionProperties') {
    doLast {
        def appPropertiesFile = file("src/main/resources/project.properties")
        def properties = new Properties()
        if (appPropertiesFile.exists()) {
            appPropertiesFile.withInputStream { properties.load(it) }
        }
        properties.setProperty("version", project.version.toString())
        appPropertiesFile.withWriter { properties.store(it, null) }
    }
}

tasks.withType(Test).configureEach {
    doFirst {
        def envFile = file('.env')
        if (envFile.exists()) {
            Files.readAllLines(Paths.get(envFile.toURI())).each { line ->
                if (line && !line.startsWith('#')) {
                    def parts = line.split('=', 2)
                    if (parts.length == 2) {
                        environment parts[0].trim(), parts[1].trim()
                    }
                }
            }
        }
    }
}

sourceSets {
    test {
        resources {
            srcDir 'src/test/conf'
            include '**/*'
        }
    }
}

tasks.register('createDatabaseScript', CreateStartScripts) {
    outputDir = file("build/generated-scripts/create-db")
    mainClass = 'com.redislabs.ycsb.CreateDatabase'
    applicationName = 'create-db'
    classpath = tasks.named('startScripts').get().classpath
    doLast {
        def unixScript = file("${outputDir}/create-db")
        unixScript.text = unixScript.text.replace(
                'CLASSPATH=$APP_HOME/lib',
                'CLASSPATH=$APP_HOME/conf:$APP_HOME/lib'
        )

        def windowsScript = file("$outputDir/create-db.bat")
        windowsScript.text = windowsScript.text.replace(
                'set CLASSPATH=%APP_HOME%\\lib',
                'set CLASSPATH=%APP_HOME%\\conf;%APP_HOME%\\lib'
        )
    }
}

tasks.register('deleteDatabaseScript', CreateStartScripts) {
    outputDir = file("build/generated-scripts/delete-db")
    mainClass = 'com.redislabs.ycsb.DeleteDatabase'
    applicationName = 'delete-db'
    classpath = tasks.named('startScripts').get().classpath
    doLast {
        def unixScript = file("${outputDir}/delete-db")
        unixScript.text = unixScript.text.replace(
                'CLASSPATH=$APP_HOME/lib',
                'CLASSPATH=$APP_HOME/conf:$APP_HOME/lib'
        )

        def windowsScript = file("$outputDir/delete-db.bat")
        windowsScript.text = windowsScript.text.replace(
                'set CLASSPATH=%APP_HOME%\\lib',
                'set CLASSPATH=%APP_HOME%\\conf;%APP_HOME%\\lib'
        )
    }
}

distributions {
    main {
        contents {
            from(tasks.createDatabaseScript) {
                into 'bin'
            }
            from(tasks.deleteDatabaseScript) {
                into 'bin'
            }
        }
    }
}

application {
    mainClass = 'com.codelry.util.ycsb.RunBenchmark'
    applicationDistribution.from("src/main/conf/") {
        into "conf"
    }
}

tasks.named("startScripts") {
    doLast {
        def unixScript = file("${outputDir}/${project.name}")
        unixScript.text = unixScript.text.replace(
                'CLASSPATH=$APP_HOME/lib',
                'CLASSPATH=$APP_HOME/conf:$APP_HOME/lib'
        )

        def windowsScript = file("$outputDir/${project.name}.bat")
        windowsScript.text = windowsScript.text.replace(
                'set CLASSPATH=%APP_HOME%\\lib',
                'set CLASSPATH=%APP_HOME%\\conf;%APP_HOME%\\lib'
        )
    }
}

tasks.named("distTar") {
    compression = Compression.GZIP
}

jreleaser {
    project {
        name = 'ycsb-redis'
        description = 'Redis YCSB implementation'
        website = 'https://github.com/mminichino/ycsb-redis'
        authors = ['Michael Minichino']
        license = 'Apache-2.0'
        copyright = "2025 Michael Minichino"
    }

    release {
        github {
            repoOwner = 'mminichino'
            name = 'ycsb-redis'
            branch = 'main'
            changelog {
                enabled = false
            }
        }
    }

    distributions {
        app {
            distributionType = 'JAVA_BINARY'
            artifacts {
                artifact {
                    path = "build/distributions/{{projectName}}-{{projectVersion}}.zip"
                }
            }
        }
    }
}
