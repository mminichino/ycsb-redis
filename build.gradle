import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id 'java'
    id 'java-library'
    id 'distribution'
    id 'application'
}

group = 'com.redislabs.ycsb'
version = '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.codelry.util.ycsb:ycsb-core:0.18.1'
    implementation 'com.codelry.util:restfull-core:1.0.2'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.19.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.19.2'
    implementation 'io.lettuce:lettuce-core:6.8.0.RELEASE'
    implementation 'com.redis:lettucemod:4.4.0'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.compileJava {
    options.release.set(8)
}

tasks.test {
    useJUnitPlatform()
}

tasks.register('updateAppVersionProperties') {
    doLast {
        def appPropertiesFile = file("src/main/resources/project.properties")
        def properties = new Properties()
        if (appPropertiesFile.exists()) {
            appPropertiesFile.withInputStream { properties.load(it) }
        }
        properties.setProperty("version", project.version.toString())
        appPropertiesFile.withWriter { properties.store(it, null) }
    }
}

tasks.withType(Test).configureEach {
    doFirst {
        def envFile = file('.env')
        if (envFile.exists()) {
            Files.readAllLines(Paths.get(envFile.toURI())).each { line ->
                if (line && !line.startsWith('#')) {
                    def parts = line.split('=', 2)
                    if (parts.length == 2) {
                        environment parts[0].trim(), parts[1].trim()
                    }
                }
            }
        }
    }
}

sourceSets {
    test {
        resources {
            srcDir 'src/test/conf'
            include '**/*'
        }
    }
}

application {
    mainClass = 'site.ycsb.Client'
    applicationDistribution.from("src/main/conf/") {
        into "conf"
    }
}

tasks.named("startScripts") {
    classpath += files("../conf")
}

tasks.named("distTar") {
    compression = Compression.GZIP
}
